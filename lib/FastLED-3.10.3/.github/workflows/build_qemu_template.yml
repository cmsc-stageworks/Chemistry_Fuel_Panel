name: ESP32 QEMU Test Template

on:
  workflow_call:
    inputs:
      platform:
        description: 'ESP32 platform to test (esp32dev, esp32c3, etc.)'
        required: true
        type: string
      platform_display:
        description: 'Display name for the platform (e.g., ESP32-DEV, ESP32-C3)'
        required: true
        type: string

permissions:
  contents: read
  actions: read
  id-token: write
  pull-requests: read

jobs:
  qemu_test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        example: [BlinkParallel]  # Test with FL_WARN output

    steps:
      - name: Checkout trusted base branch code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.repository.default_branch || 'master' }}
          path: trusted

      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
          path: pr-code

      - name: Merge safe source files from PR
        run: |
          # Copy ONLY safe source files from PR, never executable scripts
          if [ -d "pr-code/src" ]; then
            cp -r pr-code/src/* trusted/src/ 2>/dev/null || true
          fi
          if [ -d "pr-code/examples" ]; then
            cp -r pr-code/examples/* trusted/examples/ 2>/dev/null || true
          fi
          if [ -f "pr-code/platformio.ini" ]; then
            cp pr-code/platformio.ini trusted/
          fi
          if [ -f "pr-code/library.json" ]; then
            cp pr-code/library.json trusted/
          fi
          if [ -f "pr-code/library.properties" ]; then
            cp pr-code/library.properties trusted/
          fi
          if [ -f "pr-code/CMakeLists.txt" ]; then
            cp pr-code/CMakeLists.txt trusted/
          fi
        shell: bash

      - name: Set working directory to trusted
        run: echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE/trusted" >> $GITHUB_ENV

      - name: Pin python version
        working-directory: trusted
        run: |
          echo "3.11" >> .python-version

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "**/pyproject.toml"
          version: "0.8.0"

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: "trusted/.python-version"

      - name: Install CCACHE
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get update && sudo apt-get install -y ccache
          elif [ "$RUNNER_OS" == "macOS" ]; then
            brew install ccache
          elif [ "$RUNNER_OS" == "Windows" ]; then
            choco install ccache
          fi
        shell: bash

      - name: Setup CCACHE
        run: |
          echo "CCACHE_BASEDIR=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "CCACHE_DIR=$GITHUB_WORKSPACE/.ccache" >> $GITHUB_ENV
          echo "CCACHE_COMPRESS=true" >> $GITHUB_ENV
          echo "CCACHE_COMPRESSLEVEL=6" >> $GITHUB_ENV
          echo "CCACHE_MAXSIZE=400M" >> $GITHUB_ENV
          ccache --version
          ccache --show-stats
          ccache --zero-stats
        shell: bash

      - name: Cache CCACHE directory
        uses: actions/cache@v4
        with:
          path: .ccache
          key: ${{ runner.os }}-ccache-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-ccache-

      - name: Cache ESP32 QEMU
        uses: actions/cache@v4
        with:
          path: ~/.espressif
          key: ${{ runner.os }}-${{ inputs.platform }}-qemu-${{ hashFiles('ci/install-qemu.py') }}
          restore-keys: |
            ${{ runner.os }}-${{ inputs.platform }}-qemu-

      - name: Run ${{ inputs.platform_display }} QEMU test
        working-directory: trusted
        run: |
          echo "Running QEMU test for ${{ inputs.platform }}"
          bash test --qemu ${{ inputs.platform }}
        shell: bash

      - name: Display QEMU output log
        if: always()
        working-directory: trusted
        run: |
          echo "=== QEMU Output Log ==="
          if [ -f "qemu_output.log" ]; then
            cat qemu_output.log
          else
            echo "❌ qemu_output.log file not found"
            echo "Available files:"
            ls -la
          fi
        shell: bash

      - name: Validate FL_WARN output
        working-directory: trusted
        run: |
          echo "=== Validating FL_WARN output in QEMU logs ==="

          # Check if QEMU output file exists
          if [ -f "qemu_output.log" ]; then
            echo "✅ QEMU output log found"
            echo "--- First 100 lines of QEMU output ---"
            head -100 qemu_output.log
            echo "--- Last 50 lines of QEMU output ---"
            tail -50 qemu_output.log
          else
            echo "❌ QEMU output log not found"
            echo "Available files:"
            ls -la
            exit 1
          fi

          # Check for crash patterns
          if grep -q -E "(guru meditation|abort\(\)|LoadProhibited|IllegalInstruction)" qemu_output.log; then
            echo "❌ ${{ inputs.platform_display }} crashed during execution"
            echo "Crash indicators found in QEMU log"
            exit 1
          fi

          # Validate FL_WARN output is present
          if grep -q "FL_WARN:" qemu_output.log; then
            echo "✅ FL_WARN macro output detected"
            echo "FL_WARN messages found:"
            grep "FL_WARN:" qemu_output.log | head -20
          else
            echo "❌ No FL_WARN output detected"
            echo "Expected FL_WARN messages not found in QEMU log"
            exit 1
          fi

          # Validate BlinkParallel startup
          if grep -q "BlinkParallel setup starting" qemu_output.log; then
            echo "✅ BlinkParallel setup started"
          else
            echo "❌ BlinkParallel startup message not found"
            exit 1
          fi

          # Check for LED strip initialization
          if grep -q "Initialized 4 LED strips" qemu_output.log; then
            echo "✅ 4 LED strips initialized"
          else
            echo "⚠️  LED strip initialization message not found"
          fi

          # Check for loop execution
          if grep -q "Starting loop iteration" qemu_output.log; then
            echo "✅ Loop execution detected"
          else
            echo "⚠️  No loop execution messages found"
          fi

          # Check for test completion (after several loops)
          if grep -q "FL_WARN.*test finished" qemu_output.log; then
            echo "✅ FL_WARN test completion detected"
          else
            echo "⚠️  FL_WARN test completion not detected (may need more time)"
          fi

          # Validate boot success - dynamic platform check
          if [[ "${{ inputs.platform }}" == "esp32c3" ]]; then
            boot_pattern="(rst:|boot:|ESP32-C3)"
          else
            boot_pattern="(rst:|boot:|ESP32)"
          fi

          if grep -q -E "$boot_pattern" qemu_output.log; then
            echo "✅ ${{ inputs.platform_display }} boot successful"
          else
            echo "❌ ${{ inputs.platform_display }} boot indicators not found"
            exit 1
          fi

          echo "=== FL_WARN validation complete ==="
        shell: bash

      - name: Upload QEMU logs and build artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.platform }}-qemu-failure-${{ inputs.platform }}-${{ matrix.example }}-${{ github.sha }}
          path: |
            trusted/qemu_output.log
            trusted/.build/pio/${{ inputs.platform }}/
          include-hidden-files: true

      - name: Upload QEMU logs on success (for analysis)
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.platform }}-qemu-success-${{ inputs.platform }}-${{ matrix.example }}-${{ github.sha }}
          path: trusted/qemu_output.log

      - name: Summary
        if: always()
        working-directory: trusted
        run: |
          echo "=== ${{ inputs.platform_display }} QEMU Test Summary ==="
          echo "Platform: ${{ inputs.platform }}"
          echo "Example: ${{ matrix.example }}"
          echo "Status: ${{ job.status }}"
          if [ -f "qemu_output.log" ]; then
            echo "QEMU output lines: $(wc -l < qemu_output.log)"
            echo "FL_WARN count: $(grep -c 'FL_WARN:' qemu_output.log || echo 0)"
            echo "Loop iterations: $(grep -c 'Starting loop iteration' qemu_output.log || echo 0)"
          fi